100 Days of react, redux and typescript mastery

React Notes 

DAY 1: Introduction to react
What is React?
React is a javascript library developed by facebook for building  User Interfaces for web application.
The React applications are made up of components which are a peice of the user interface eg a button, section , form or even an entire page.


Why React?
The react library is very effective for building web applications with reusabled components and also makes it easier to effect updates and modifications to the application without having to refactor its entire code base because components can be created and added independently.

Components
Components are essentially javascript functions that return mark up and each component can be nested within another component.

Properties:
A property is an attribute that is passed down to a component

Events:
Events are actions that occur during the process of using an application for e.g. button is clicked and page is scrolled
using events:
1. decide what kind of event to listen for
2. create a function known as an event handler or callback
3. Name the function using the pattern handle+EventName or on+EventType
4. pass the function as a property to the affected element eg a button or an input field
5. make sure to pass the function using the event name eg onClick, onMouseOver etc
6. make sure to pass a reference to the function and do not call it


State: 
we make use of state when there is a peice of content that changes in the application frontend usually due to an event or as user interacts with the application. When the data changes React will update the content on the screen automatically. React contains a state library for managing state. Typically you would use the useState function to define a new state variable and its setter function. Calling the setter function causes react to rerender the function with the new values of the state variable.

Some JSX rules
1. All tags like <br/> have to be closed
2.Components also can’t return multiple JSX tags. All elements in a component must be wrapped in a single <div>...</div> or empty <></> wrapper.
3. The css class of an element is specified with the className attribute not class like in HTML.
4.Curly braces can be used within the mark up to embed Javascript code within both element content and attribute values








DAY 2: 
Hooks
What are Hooks?
Hooks are functions that let you “hook into” React state and lifecycle features from function components. Hooks don’t work inside classes — they let you use React without classes.

React provides a few built-in Hooks like useState, useEffect and useRef but you can also create your own Hooks to reuse stateful behavior between different components.


Why use Hooks?
Hooks provide a consice way to access reference data in an application
Hooks add additional features to a component

Commonly used hooks
1. useState: allows components to use react state system
2. useEffect: allows a component to run specified code at specified points in time 
3. useContext: enables a component access values stored in the applications context



Rules for using Hooks:

1. Only call Hooks at the top level. Don’t call Hooks inside loops, conditions, or nested functions.
2. Only call Hooks from React function components. Don’t call Hooks from regular JavaScript functions.


HTTP requests:
Requests are a kind of text message with specific format used to access data from a server. Each request is accompanied by a response from the server. Requests are sent as objects rather than strings

A request usually consists of:
1. A request line:
contains the url to which the request is being made. The request line includes a method which indicates the general goal of the request
The four common request methods are:
GET: means we are trying to get some information from the server
POST: means we are telling the server to create some new record
PUT: means we are updating an existing record completely
PATCH: means we are partially updating an existing record
DEL:  means we are removing an existing record



2. Headers
provides additional information to the server that is recieving the request. This information could include
the authorization which lets the server know who is making the request, the type of content requested
3. Body -optional

A response consists of:
1. A status line:
Include a status code that informs the requesting party of the satus of the request.
The following are the most frequent status codes and there meanings:

200: means the request was successful and the requested data is available
201: means the record was successfully created
204: means the record was successfully deleted

301: means the URL requested has changed

400: Something about the request syntax is incorrect
401: the client is not authorized or should provide authorization
403: means you are Forbiden from accessing this data
404: means the requested data was not found

500: something went wrong within the server. Server Error


3. A body: contains the information returned 

whenever a request is made, it takes an amount of time for the response to return and we have to account for that time because javascript 
does not take account for this time at run time. This is handled by making the request asynchronously and using the await keyword.


DAY 3

Read about useEffect
Play around with json-server
list elements of iydl app
draw application hierarchy diagram for iydl App
read about useContext


Context feature
Context is used as an alternative prop system to pass information between components even when they dont have direct links to each other
It is not a replacement for props system
it is not a replacement for communication channels like redux

Steps to create context
1 create context:
a. create a file for the context object, usually named as TypeOfData+Context.js
b import import { createContext } from "react"
c initialize the context object : const TypeOfData+Context= createContext()

2 specify data to be shared:
a define provider function with values and functions to be shared with components. This function returns a context.provider component with all defined values
b export provider function
c export context object as default

3 consume the data from any component
a import provider function to parent file ie index file
b embed app component in provider component
c import useContext hook and created context object into appropriate component files 
d destructure the required values by calling the useContext function with the context object as argument

How to determine what data needs to be shared to all components through the context file 

1 list all the state values and divide them into application state and component state
Application state values are values that are used by many different components and component state is data that is used by very few components


DAY 4
Events and state desing Process

1 list out what a user will do and the changes that they will see while using the application

2 categorize each step as an event or an event handler. Each interaction from the user requires an event handler and every change in the state requires a state change

3. Group common steps, remove duplicate steps and rewrite and generalize their description

NAMING THE STATE AND SETTING THE TYPE
Tips: try to use numbers, booleans or strings for the state values as objects and arrays are more complex to work with 

4. Look at mockup. Remove or simplify parts of the component that dont change that are not changing.

5. Replace remaining elements with text description.

6. repeat 4 and 5  with a different variation

7. Imagine that you have to return the text in steps 5 and 6. In addition to your component props, what other arguments would you need?

8. Decide where each event handler + state will be defined. Check if other components need to know about that peice of state. if yes then the state should be defined in the app if not then the state should be defined within the component.event handler should be defined inside the component that it modifies.



Document Wide check Handling,




Event capturing and bubbling:
Is about events occuring in the  browser. the browser tries to find event handlers to call when a user does something in the application.
The order is divided into the
1. capture phase: Here the browser looks at the element in which the event occurs and checks if the most parent element has some related event handler. The browser performs this check for the next parent element of the affected element until it reaches the exact element in which the event occurs,
 
2.target phase:Here browser looks at the event where the event occurs and if there is an event handler

 and 
3.  buble phase: The browser checks if the immediate parent of the element where the event occured and if there is an event it calls the handler
 
Checking element inclusion

useRef: is a function that allows us to create a reference to an element or component within the app
how to use
1: import the useRef hook from react
2: initialize a reference variable to the use ref hook eg const divEl= useRef()
3. add the variable as a ref property to the desired element or component eg <div ref={divEl}>'content...'</div>


portal enable you to alter the behaviour of the react app. Eg you can use the portal to move a component away from its parent in order to access some behaviour.  ReactDOM.createPortal(<div></div>)


Day 5:
Steps for creating custom hooks

1. create a function called useSomething
2. find all non-JSX expressions that refer to 1-2 related peices of state
3. cut them all out and paste into the function you created
4. find all variables that are not defined in your original component from where you cut the code
5. Return an object that contains these variables in the useSomething function
6. call the hook in the component and destructure the properties that the component needs
7. find 'not defined errors in the hook' pass the missing variables as arguements to the hook
8. rename the hook to something more meaningful
9. Rename the returned properties to something more descriptive.

useReducer:
This is a function for managing state and it defines state similar to the useState function. it is an alternative to useState so you need to use either most of the time. useReducer is most suitable when you have multiple peices of state that are closely related
and when the we have a state who's future value depends on the current state.
When called, the useReduce hook produceses a state object, and when a change is required an action object is sent to its dispatch function
which is automatically sent to a reducer function which then creates the new state which can then be passed to the component from its parent.

rules to creating a useReducer:
1. Whatever is returned by the reducer function becomes the new state
2. The reducer function cannot use async/await functions, make requests or promises  and cannot use outside variables
3. do not directly modify the state object in the reducer always create a new state object and add the specific object


REDUX
Redux is a library used to manage the entire state of an application using techniques like use reducer.
With redux you create a store to create and maintain the state object and then enable individual components to connect to the store and access the state. Redux library doesnot assume that the application is using react. It uses context technique under the hook.
This library is essential when developing larger applications with multiple components with multiple state variables.
ReduxToolkit library helps simplify the use of the classic redux library making the coding.

Redux Store
A store is an object that will hold all the state data. An application will typically have one redux store except for really large applications.  Usually to access the store you utilize the react redux library. 



Conneting React to Redux

Creating A redux store
1. Identify what state exists in the application
2. identify how that state changes over time
3. group togethr common pieces of state
4 create a slice in each group

Using A redux store
1. export the store from its file
2. Import th store into the root 'index.js' file
3. import the 'Provider' component from 'react-redux' library
4. Wrap the app component with the provider, and pass the store as prop to the Provider

Accessing dispatch functions from
1. Add a reducer that changes the state in some way to the state object
2. Export the action creator that the slice automatically creates
3. Find the component that you want to dispact the action from
4. import the action creator function and 'useDispatch' hook  from react-redux
5. call the useDisPatch hook asigning it to a variable to get access to the dispatch function
6. when the coresponding event occurs, call the dispatch function with the imported action creator as arguement

Accessing state inside a component
1. Find the component that needs to access the state
2. import useSelector hook from 'react-redux'
3. call the useSelector hook, passing in a selector function
4. use the state returned in the application

Changing State inside a component
1. Add a reducer to one of the slices that changes state in some particular way
2. Export the action creator that the slice automatically creates
3. Find the component from where the state change will be dispatched
4. Import the action creator function and 'useDispatch' from 'react-redux'


creating extra reducers:
1. import createAction from 'react-redux'
2. initialize a variable with the name of the reducer to the createAction function and pass an action type string as arguement
3. define an extraReducers function with 'builder' as an arguement, then call the builder.addCase function passing the action type string and dersired change as a callback function with state and action as arguements





